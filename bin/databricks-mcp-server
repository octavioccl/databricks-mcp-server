#!/usr/bin/env python3
"""
Databricks MCP Server CLI Entry Point

This script provides a command-line interface for starting the Databricks MCP server
with different backends (FastMCP, standard MCP) and configurations.
"""

import sys
import argparse
import os
from pathlib import Path
import fastmcp
import mcp
import databricks.sdk

# Add src directory to Python path
current_dir = Path(__file__).parent
src_root = current_dir.parent / "src"
sys.path.insert(0, str(src_root))

def setup_logging(level: str = "INFO"):
    """Setup logging configuration."""
    import logging
    
    log_level = getattr(logging, level.upper(), logging.INFO)
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

def check_requirements():
    """Check if required packages are installed."""
    try:

        return True
    except ImportError as e:
        print(f"‚ùå Missing required dependency: {e}")
        print("\nPlease install dependencies:")
        print("pip install fastmcp 'mcp[cli]' databricks-sdk")
        return False

def validate_environment():
    """Validate environment variables."""
    required_vars = ["DATABRICKS_HOST", "DATABRICKS_TOKEN"]
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print("‚ùå Missing required environment variables:")
        for var in missing_vars:
            print(f"  - {var}")
        print("\nExample configuration:")
        print("export DATABRICKS_HOST=https://your-workspace.cloud.databricks.com")
        print("export DATABRICKS_TOKEN=your-token-here")
        print("export DATABRICKS_SQL_WAREHOUSE_ID=your-warehouse-id  # optional")
        return False
    
    return True

def run_fastmcp_server():
    """Run the FastMCP server."""
    try:
        from databricks_mcp.servers.main_fastmcp import main
        print("üöÄ Starting Databricks MCP Server (FastMCP)")
        main()
    except ImportError as e:
        print(f"‚ùå Failed to import FastMCP server: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Server error: {e}")
        sys.exit(1)

def run_standard_server():
    """Run the standard MCP server."""
    try:
        from databricks_mcp.servers.main import main
        print("üöÄ Starting Databricks MCP Server (Standard)")
        main()
    except ImportError as e:
        print(f"‚ùå Failed to import standard server: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Server error: {e}")
        sys.exit(1)

def test_connection():
    """Test the Databricks connection."""
    try:
        from databricks_mcp.core.config import DatabricksConfig
        from databricks_mcp.core.utils.databricks_client import DatabricksClientWrapper
        
        print("üîç Testing Databricks connection...")
        
        # Load and validate config
        config = DatabricksConfig.from_env()
        if not config.validate():
            print("‚ùå Invalid configuration")
            return False
        
        # Test connection
        client = DatabricksClientWrapper(config)
        
        # Try to list catalogs as a connection test
        import asyncio
        async def test():
            catalogs = await client.list_catalogs()
            return catalogs
        
        catalogs = asyncio.run(test())
        
        print(f"‚úÖ Connection successful! Found {len(catalogs)} catalogs:")
        for catalog in catalogs[:5]:  # Show first 5
            print(f"  - {catalog.name}")
        
        if len(catalogs) > 5:
            print(f"  ... and {len(catalogs) - 5} more")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Connection test failed: {e}")
        return False

def show_config():
    """Show current configuration."""
    try:
        from databricks_mcp.core.config import DatabricksConfig, MCPConfig
        
        print("üìã Current Configuration:")
        print("=" * 50)
        
        # Databricks config
        try:
            db_config = DatabricksConfig.from_env()
            print("Databricks Configuration:")
            config_dict = db_config.to_dict()
            for key, value in config_dict.items():
                print(f"  {key}: {value}")
        except Exception as e:
            print(f"‚ùå Databricks config error: {e}")
        
        print()
        
        # MCP config
        try:
            mcp_config = MCPConfig.from_env()
            print("MCP Configuration:")
            config_dict = mcp_config.to_dict()
            for key, value in config_dict.items():
                print(f"  {key}: {value}")
        except Exception as e:
            print(f"‚ùå MCP config error: {e}")
            
    except ImportError as e:
        print(f"‚ùå Failed to import config: {e}")

def main():
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(
        description="Databricks MCP Server",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s --server fastmcp              # Start FastMCP server (recommended)
  %(prog)s --server standard             # Start standard MCP server
  %(prog)s --test                        # Test Databricks connection
  %(prog)s --config                      # Show current configuration
  %(prog)s --server fastmcp --log DEBUG  # Start with debug logging
        """
    )
    
    parser.add_argument(
        "--server", "-s",
        choices=["fastmcp", "standard"],
        default="fastmcp",
        help="Server type to run (default: fastmcp)"
    )
    
    parser.add_argument(
        "--test", "-t",
        action="store_true",
        help="Test Databricks connection and exit"
    )
    
    parser.add_argument(
        "--config", "-c",
        action="store_true", 
        help="Show current configuration and exit"
    )
    
    parser.add_argument(
        "--log", "-l",
        choices=["DEBUG", "INFO", "WARNING", "ERROR"],
        default="INFO",
        help="Logging level (default: INFO)"
    )
    
    parser.add_argument(
        "--version", "-v",
        action="store_true",
        help="Show version and exit"
    )
    
    args = parser.parse_args()
    
    # Setup logging
    setup_logging(args.log)
    
    # Show version
    if args.version:
        try:
            from databricks_mcp import __version__
            print(f"Databricks MCP Server v{__version__}")
        except ImportError:
            print("Databricks MCP Server v1.0.0")
        return
    
    # Show config
    if args.config:
        show_config()
        return
    
    # Test connection
    if args.test:
        if not check_requirements():
            sys.exit(1)
        if not validate_environment():
            sys.exit(1)
        success = test_connection()
        sys.exit(0 if success else 1)
    
    # Start server
    print("üîß Databricks MCP Server Starting...")
    
    # Check requirements
    if not check_requirements():
        sys.exit(1)
    
    # Validate environment
    if not validate_environment():
        sys.exit(1)
    
    # Run appropriate server
    if args.server == "fastmcp":
        run_fastmcp_server()
    elif args.server == "standard":
        run_standard_server()
    else:
        print(f"‚ùå Unknown server type: {args.server}")
        sys.exit(1)

if __name__ == "__main__":
    main() 